# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: I know
- Location: D:\PlayrightE2E\tests\007Product.spec.ts:101:7

# Error details

```
Error: locator.click: Error: strict mode violation: locator('//i[@class=\'oxd-icon bi-trash\']') resolved to 2 elements:
    1) <i data-v-bddebfba="" data-v-f5c763eb="" class="oxd-icon bi-trash"></i> aka getByRole('button', { name: '' }).first()
    2) <i data-v-bddebfba="" data-v-f5c763eb="" class="oxd-icon bi-trash"></i> aka getByRole('button', { name: '' }).nth(1)

Call log:
  - waiting for locator('//i[@class=\'oxd-icon bi-trash\']')

    at D:\PlayrightE2E\tests\007Product.spec.ts:114:59
```

# Test source

```ts
   14 | //       await page.getByRole('link', { name: 'Register' }).click();
   15 | //       await page.getByLabel('Male', { exact: true }).check();
   16 | //       await page.getByLabel('Female').check();
   17 | //       await page.getByLabel('First name:').click(); 
   18 | //       await page.getByLabel('First name:').fill(data[0]);
   19 | //       await page.getByLabel('Last name:').click();
   20 | //       await page.getByLabel('Last name:').fill(data[1]);
   21 | //       await page.locator('select[name="DateOfBirthDay"]').selectOption('17');
   22 | //       await page.locator('select[name="DateOfBirthMonth"]').selectOption('3');
   23 | //       await page.locator('select[name="DateOfBirthYear"]').selectOption('1929');
   24 | //       await page.getByLabel('Email:').click();
   25 | //       await page.getByLabel('Email:').fill(data[2]);
   26 | //       await page.getByLabel('Company name:').click();
   27 | //       await page.getByLabel('Company name:').fill('BS-23');
   28 | //       await page.getByLabel('Newsletter:').uncheck();
   29 | //       await page.getByLabel('Password:', { exact: true }).click();
   30 | //       await page.getByLabel('Password:', { exact: true }).fill('@tania12');
   31 | //       await page.getByLabel('Confirm password:').click();
   32 | //       await page.getByLabel('Confirm password:').fill('@tania12');
   33 | //       await page.getByRole('button', { name: 'Register' }).click();
   34 | //       await expect(page.locator('body')).toContainText('Your registration completed');
   35 | //       await delay(2000);
   36 | //   });
   37 | // });
   38 |
   39 |
   40 | // test('Handle error messages', async ({ page }) => {
   41 | //   const errorMessageLocator = page.locator("//div[contains(@class, 'alert alert-danger mt5 ng-star-inserted')] | //p[contains(text(),'We are unable to access your account due to an inv')]");
   42 |
   43 | //   await expect(errorMessageLocator).toBeVisible();
   44 |
   45 | //   const errorMsg = await errorMessageLocator.innerText();
   46 | //   const trimmedErrorMsg = errorMsg.trim();
   47 |
   48 | //   if (trimmedErrorMsg === "Verification Code is invalid") {
   49 | //     console.log("Test is completed");
   50 | //   } 
   51 | //   else if (trimmedErrorMsg === "We are unable to access your account due to an invalid verification code. Please contact Participant Services at 888.333.6315, option 1.") {
   52 | //     await Unlock_LOCK_Status(page);
   53 | //   } 
   54 | //   else {
   55 | //     console.log("Unknown error message: " + trimmedErrorMsg);
   56 | //   }
   57 | // });
   58 |
   59 | // // Define the Unlock_LOCK_Status function
   60 | // async function Unlock_LOCK_Status(page: any) {
   61 | //   // Add logic to unlock the account status here
   62 | //   console.log("Unlocking account...");
   63 | // }
   64 |
   65 |
   66 |
   67 |
   68 |
   69 | const test_data=JSON.parse(JSON.stringify(require("../testdata/testdata.json")));
   70 |
   71 |
   72 |   test('Login with valid credentials',async({page}) => {
   73 |     await page.goto("https://demo.applitools.com/index.html");
   74 |     await page.locator("//input[@id='username']").fill(test_data.user.username);
   75 |     await page.locator("//input[@id='password']").fill(test_data.user.password);
   76 |     await page.locator("//a[@id='log-in']").click();
   77 |     await page.close();  
   78 |   });
   79 |   
   80 |   test('data driven test automation', async ({ page }) => {
   81 |       const data = require('../testdata/orange_hrm.json');
   82 |       for (const user_data of data) {
   83 |           await page.goto('https://opensource-demo.orangehrmlive.com/web/index.php/auth/login');
   84 |           await page.locator("input[placeholder='Username']").fill(user_data.username);
   85 |           await page.locator("input[placeholder='Password']").fill(user_data.password);
   86 |           await page.locator("button:has-text('Login')").click();
   87 |           if (user_data.username === 'Admin' && user_data.password === 'admin123') {
   88 |               await page.locator("i.oxd-icon.bi-caret-down-fill.oxd-userdropdown-icon").click();
   89 |               await page.waitForTimeout(2000); // Wait for the logout option to be visible
   90 |               await page.locator("a:has-text('Logout')").click();
   91 |           } else {
   92 |               const errorMessage = page.locator("p.oxd-text.oxd-text--p.oxd-alert-content-text");
   93 |               await expect(errorMessage).toHaveText(user_data.expected);
   94 |           }
   95 |       }
   96 |   });
   97 |   test('test automation for e-commerce product 222',async({page}) => {
   98 |     await page.goto("https://www.arogga.com/");
   99 |     await page.locator("//a[normalize-space()='Veterinary']").click();
  100 |   });
  101 |   test('I know', async({page}) => {
  102 |     await page.goto("https://opensource-demo.orangehrmlive.com/web/index.php/auth/login");
  103 |     await page.locator("input[placeholder='Username']").fill("Admin");
  104 |     await page.locator("input[placeholder='Password']").fill("admin123");
  105 |     await page.locator("button:has-text('Login')").click();
  106 |     await page.locator("//span[normalize-space()='My Info']").click();
  107 |     await page.locator("//button[normalize-space()='Add']").click();
  108 |     await delay(2000);
  109 |     await page.locator("//input[@type='file']").setInputFiles('C:\\Users\\hp\\Downloads\\Point-Out-Manual-Check.txt');
  110 |     await delay(2000);
  111 |     await page.locator("//textarea[@placeholder='Type comment here']").fill("Test Purpose");
  112 |     await delay(2000);
  113 |     await page.locator("//div[@class='orangehrm-attachment']//button[@type='submit'][normalize-space()='Save']").click();
> 114 |     await page.locator("//i[@class='oxd-icon bi-trash']").click();
      |                                                           ^ Error: locator.click: Error: strict mode violation: locator('//i[@class=\'oxd-icon bi-trash\']') resolved to 2 elements:
  115 |     await delay(2000);
  116 |     await page.locator("//button[normalize-space()='Yes, Delete']").click();
  117 |     await delay(2000);
  118 |   
  119 |   
  120 |   });
  121 |
  122 |
  123 |
  124 |
  125 |
```